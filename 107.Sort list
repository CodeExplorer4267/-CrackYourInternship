/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* findmid(ListNode* head){
      ListNode* slow=head;
      ListNode* fast=head->next;
        while(fast->next!=NULL){
          fast=fast->next;
            if(fast->next!=NULL){
                fast=fast->next;
            }
          slow=slow->next;
        }
        return slow;
    }
    void addatend(ListNode*& head,ListNode*& tail,int d){
        ListNode* newnode=new ListNode(d);
        if(head==NULL){
            head=newnode;
            tail=newnode;
            return;
        }
        tail->next=newnode;
        tail=tail->next;
    }
    ListNode* solve(ListNode* first,ListNode* second){
        if(first==NULL){
          return second;
        }
        if(second==NULL){
            return first;
        }
        // ListNode* dummy=new ListNode(0);
        ListNode* head=NULL;
        ListNode* tail=NULL;
        while(first!=NULL && second!=NULL){
            if(first->val<=second->val){
                addatend(head,tail,first->val);
                first=first->next;
            }
            else{
                addatend(head,tail,second->val);
                second=second->next;
            }
        }
        while(first!=NULL){
          addatend(head,tail,first->val);
            first=first->next;
        }
        while(second!=NULL){
            addatend(head,tail,second->val);
            second=second->next;
        }
        return head;
    }
    ListNode* sortList(ListNode* head) {
       if(head==NULL || head->next==NULL){
         return head;
       } 
        ListNode* mid=findmid(head);
        ListNode* left=head;
        ListNode* right=mid->next;
        mid->next=NULL;
        left=sortList(left);
        right=sortList(right);
        ListNode* ans=solve(left,right);
        return ans;
    }
};
