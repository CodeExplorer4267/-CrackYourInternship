class Solution {
public:
TreeNode* solve(TreeNode* root,TreeNode* p,TreeNode* q){
    if(root==NULL){
        return NULL;
    }
    if(root->val==p->val){
        return p;
    }
    if(root->val==q->val){
        return q;
    }
    TreeNode* left=solve(root->left,p,q);
    TreeNode* right=solve(root->right,p,q);
    if(left==NULL && right==NULL){
        return NULL;
    }
    if(left!=NULL && right!=NULL){
        return root;
    }
    if(left!=NULL && right==NULL){
        return left;
    }
    if(left==NULL && right!=NULL){
        return right;
    }
    return NULL;
}
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        return solve(root,p,q);
    }
};
