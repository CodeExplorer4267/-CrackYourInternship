Given an array arr[] of N nodes representing preorder traversal of some BST. You have to build the BST  from the given preorder traversal. 

In Pre-Order traversal, the root node is visited before the left child and right child nodes.
------------------------------------------------------------------
Example 1:

Input:
N = 5
arr[]  = {40,30,35,80,100}
Output: 35 30 100 80 40
Explanation: PreOrder: 40 30 35 80 100
Therefore, the BST will be:
              40
           /      \
         30       80
           \        \   
           35      100
Hence, the postOrder traversal will
be: 35 30 100 80 40
---------------------------------------------------------------------
class Solution {
  public:
    Node *helper(int pre[],int &n,int &index,int l,int h)
    {
        if(index >= n) return NULL;
        
        if(l > pre[index] or pre[index] > h)
        {
            return NULL;
        }
        
        Node *root= newNode(pre[index++]);
        root->left = helper(pre,n,index,l,root->data);
        root->right = helper(pre,n,index,root->data,h);
        
        return root;
    }
    // Function that constructs BST from its preorder traversal.
    Node* Bst(int pre[], int n) {
        // code here
        if(n ==0) return NULL;
        int i=0;
        return helper(pre,n,i,0,INT_MAX);
    }
};
