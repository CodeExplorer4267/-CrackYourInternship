/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    class compare{
       public:
         bool operator()(ListNode* a,ListNode* b){
            return a->val>b->val;
         }
    };
    ListNode* mergeKLists(vector<ListNode*>& lists) {
       priority_queue<ListNode*,vector<ListNode*>,compare> minh; 
       ListNode* head=NULL;
       ListNode* tail=NULL;
       if(lists.size()==0){
        return NULL;
       }
       for(int i=0;i<lists.size();i++){
        if(lists[i]!=NULL){
            minh.push(lists[i]);
        }
       }
       while(!minh.empty()){
           if(head==NULL){
              head=tail=minh.top();
              minh.pop();
              if(head->next!=NULL){
                minh.push(head->next);
              }
           }
           else{
             tail->next=minh.top();
             minh.pop();
             tail=tail->next;
             if(tail->next!=NULL){
                minh.push(tail->next);
             }
           }
       }
       return head;
    }
};
