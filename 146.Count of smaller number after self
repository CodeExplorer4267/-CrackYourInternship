class Solution {
public:
    void merge(vector<pair<int,int>> &arr, int low, int mid, int high, vector<int> &ans)
    {
        for(int i=low; i<=mid; i++)
        {
            ans[arr[i].second]+=lower_bound(arr.begin()+mid+1,arr.begin()+high+1,make_pair(arr[i].first,0))-arr.begin()-mid-1;
        }
        int i=low, j=mid+1;
        vector<pair<int,int>> temp(high-low+1);
        int k=0;
        while(i<=mid and j<=high)
        {
            if(arr[i].first<=arr[j].first)
            {
                temp[k++]=arr[i++];
            }
            else 
            {
                temp[k++]=arr[j++];
            }
        }
        while(i<=mid)
            temp[k++]=arr[i++];
        while(j<=high)
            temp[k++]=arr[j++];
        for(int i=low; i<=high; i++)
        {
            arr[i]=temp[i-low];
        }
    }
    void mergesort(vector<pair<int,int>> &arr, int low, int high, vector<int> &ans)
    {
        if(low<high)
        {
            int mid=low+(high-low)/2;
            mergesort(arr,low,mid,ans);
            mergesort(arr,mid+1,high,ans);
            merge(arr,low,mid,high,ans);
        }
    }
    vector<int> countSmaller(vector<int>&nums) 
    {
        int n=nums.size();
        vector<pair<int,int>> arr(n);
        for(int i=0; i<n; i++)
            arr[i]={nums[i],i};
        vector<int> ans(n,0);
        mergesort(arr,0,n-1,ans);
        return ans;
    }
};
