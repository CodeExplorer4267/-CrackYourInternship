/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* solve(vector<int>& preorder,int prestart,int preend,vector<int>& postorder,int poststart,int postend){
        if(prestart>preend){
            return NULL;
        }
        TreeNode* root=new TreeNode(preorder[prestart]);
        if(prestart==preend){
            return root;
        }
        int left_root=preorder[prestart+1];
        int i=poststart;
        while(i<=postend){
            if(postorder[i]==left_root){
                break;
            }
            i++;
        }
        int l=i-poststart+1;
        root->left=solve(preorder,prestart+1,prestart+l,postorder,poststart,i);
        root->right=solve(preorder,prestart+l+1,preend,postorder,i+1,postend);
        return root;
    }
    TreeNode* constructFromPrePost(vector<int>& preorder, vector<int>& postorder) {
        int n=preorder.size();
        TreeNode* ans=solve(preorder,0,n-1,postorder,0,n-1);
        return ans;
    }
};
