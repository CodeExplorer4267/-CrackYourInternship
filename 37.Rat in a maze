class Solution {
  public:
  bool isSafe(int newx,int newy,vector<vector<bool>> &visited,int n,
  vector<vector<int>> &mat){
      if((newx>=0 && newx<n)&&(newy>=0 && newy<n)&&visited[newx][newy]!=1 && mat[newx][newy]==1){
          return true;
      }
      return false;
  }
  void solve(int x,int y,vector<vector<int>> &mat,int n, vector<string> &ans,
  vector<vector<bool>> &visited,string path){
      if(x==n-1 && y==n-1){
          ans.push_back(path);
          return;
      }
      visited[x][y]=1;
      if(isSafe(x+1,y,visited,n,mat)){
          solve(x+1,y,mat,n,ans,visited,path+'D');
      }
      if(isSafe(x,y-1,visited,n,mat)){
          solve(x,y-1,mat,n,ans,visited,path+'L');
      }
      if(isSafe(x,y+1,visited,n,mat)){
          solve(x,y+1,mat,n,ans,visited,path+'R');
      }
      if(isSafe(x-1,y,visited,n,mat)){
          solve(x-1,y,mat,n,ans,visited,path+'U');
      }
      visited[x][y]=0;
  }
    vector<string> findPath(vector<vector<int>> &mat) {
        int n=mat.size();
       string path="";
       vector<string> ans;
       vector<vector<bool>> visited(n,vector<bool>(n,0));
       if(mat[0][0]==0){
           return ans;
       }
       solve(0,0,mat,n,ans,visited,path);
       return ans;
     }
};
