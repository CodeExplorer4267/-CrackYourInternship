/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverse(ListNode* head){
       ListNode* curr=head;
       ListNode* next=NULL;
       ListNode* prev=NULL;
       while(curr!=NULL){
          next=curr->next;
          curr->next=prev;
          prev=curr;
          curr=next;
       }
       return prev;
    }
    void addatend(ListNode* &head,ListNode* &tail,int d){
        ListNode* newnode=new ListNode(d);
        if(head==NULL && tail==NULL){
            head=newnode;
            tail=newnode;
        }
        else{
            tail->next=newnode;
            tail=newnode;
        }
    }
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        if(l1==NULL){
            return l2;
        }
        if(l2==NULL){
            return l1;
        }
        l1=reverse(l1);
        l2=reverse(l2);
        int carry=0;
        ListNode* head=NULL;
        ListNode* tail=NULL;
        int sum=0;
        while(l1!=NULL || l2!=NULL || carry!=0){
            sum=carry;
            if(l1!=NULL){
                sum+=l1->val;
                l1=l1->next;
            }
            if(l2!=NULL){
                sum+=l2->val;
                l2=l2->next;
            }
            int digit=sum%10;
            carry=sum/10;
            addatend(head,tail,digit);
        }
        ListNode* head2=reverse(head);
        return head2;
    }
};
