class Solution {
public:
int getPivot(vector<int>& nums){
    int s=0;
    int e=nums.size()-1;
    int mid=(s+e)/2;
    while(s<e){
        if(nums[mid]>=nums[0]){
            s=mid+1;
        } 
        else{
            e=mid;
        }
        mid=(s+e)/2;
    }
    return s;
}
int binarySearch(vector<int>& nums, int target,int s,int e){
    int mid=(s+e)/2;
    while(s<=e){
        if(nums[mid]==target){
           return mid; 
        }
        else if(nums[mid]>target){
            e=mid-1;
        }
        else{
            s=mid+1;
        }
        mid=(s+e)/2;
    }
    return -1;
}
    int search(vector<int>& nums, int target) {
        int pivot=getPivot(nums);
        int n=nums.size();
        if(nums[pivot]<=target && nums[n-1]>=target){
            return binarySearch(nums,target,pivot,n-1);
        }
        else{
            return binarySearch(nums,target,0,pivot-1);
        }
    }
};
