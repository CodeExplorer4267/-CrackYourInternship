class Solution {
  public:
    // Function to detect cycle in a directed graph.
    bool solve(unordered_map<int,bool> &visited,unordered_map<int,bool> &dfs_visited,
    int node,vector<int> adj[]){
        visited[node]=true;
        dfs_visited[node]=true;
        for(auto neigh:adj[node]){
            if(!visited[neigh]){
                bool ans=solve(visited,dfs_visited,neigh,adj);
                if(ans){
                    return true;
                }
            }
            else if(dfs_visited[neigh]){
                return true;
            }
        }
        dfs_visited[node]=false;
        return false;
    }
    bool isCyclic(int V, vector<int> adj[]) {
       unordered_map<int,bool> visited;
       unordered_map<int,bool> dfs_visited;
       for(int i=0;i<V;i++){
           if(!visited[i]){
               bool ans=solve(visited,dfs_visited,i,adj);
               if(ans==true){
                   return true;
               }
           }
       }
       return false;
    }
};
