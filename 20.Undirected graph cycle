class Solution {
  public:
    // Function to detect cycle in an undirected graph.
    bool solve(unordered_map<int,bool> &visited,int node,vector<int> adj[]){
        unordered_map<int,int> parent;
        visited[node]=true;
        parent[node]=-1;
        queue<int> q;
        q.push(node);
        while(!q.empty()){
            int front=q.front();
            q.pop();
            for(auto neigh:adj[front]){
                if(visited[neigh]==true && neigh!=parent[front]){
                    return true;
                }
                else if(!visited[neigh]){
                    visited[neigh]=true;
                    parent[neigh]=front;
                    q.push(neigh);
                }
            }
        }
        return false;
    }
    bool isCycle(int V, vector<int> adj[]) {
       unordered_map<int,bool> visited;
       
       for(int i=0;i<V;i++){
           if(!visited[i]){
               bool ans=solve(visited,i,adj);
               if(ans==true){
                   return true;
               }
           }
       }
       
       return false;
    }
};
