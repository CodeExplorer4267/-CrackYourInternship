#include<unordered_map>
#include<list>
#include<stack>
void toposort(int node,unordered_map<int,list<int>> &adj,unordered_map<int,bool> &vis,stack<int> &st){
     vis[node]=true;
	 for(auto neigh:adj[node]){
		 if(!vis[neigh]){
			 toposort(neigh,adj,vis,st);
		 }
	 }	
	 st.push(node);
}
void dfs(int node,unordered_map<int,bool> &vis,unordered_map<int,list<int>> &transpose){
	vis[node]=true;
	for(auto neigh:transpose[node]){
		if(!vis[neigh]){
			dfs(neigh,vis,transpose);
		}
	}
}
int stronglyConnectedComponents(int v, vector<vector<int>> &edges)
{
	unordered_map<int,list<int>> adj;
	for(int i=0;i<edges.size();i++){
      int u=edges[i][0];
	  int v=edges[i][1];
	  adj[u].push_back(v);
	}
	unordered_map<int,bool> vis;
	stack<int> st;
	for(int i=0;i<v;i++){
		if(!vis[i]){
			toposort(i,adj,vis,st);
		}
	}
	unordered_map<int,list<int>> transpose;
	for(int i=0;i<v;i++){
		vis[i]=0;
		for(auto neigh:adj[i]){
			transpose[neigh].push_back(i);
		}
	}
	int count=0;
	while(!st.empty()){
		int top=st.top();
		st.pop();
        if(!vis[top]){
			count++;
			dfs(top,vis,transpose);
		}
	}
	return count;
}
