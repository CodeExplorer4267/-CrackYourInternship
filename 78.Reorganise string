class Solution {
public:
     struct cmp {
        bool operator()(pair<char, int>& a, pair<char, int>& b) {
            return a.second < b.second;
        }
    };
    string reorganizeString(string s) {
        priority_queue<pair<char,int>,vector<pair<char,int>>,cmp> minh;
        unordered_map<char,int> map;
        for(int i=0;i<s.length();i++){
            map[s[i]]++;
        }
        for(auto i:map){
            pair<char,int> p=make_pair(i.first,i.second);
            minh.push(p);
        }
        if(s.length()%2 !=0 && minh.top().second > (s.length()+1)/2){
            return "";
        }
        else if(s.length()%2==0 && minh.top().second > s.length()/2){
            return "";
        }
        char *res=new char[s.length()];
        int idx=0;
        while(!minh.empty()){
            pair<char,int> top=minh.top();
            minh.pop();
            char ch=top.first;
            int count=top.second;
            while(count>0){
               if(idx>=s.length()){
                  idx=1;
               }
               res[idx]=ch;
               idx+=2;
               count--;
            }
        }
        string ans="";
        for(int i=0;i<s.length();i++){
            ans.push_back(res[i]);
        }
        return ans;
    }
};
